#include <vector>
#include <map>
#include "sequence-number.h"

#ifndef TCP_TYPEDEFS_H
#define TCP_TYPEDEFS_H

namespace ns3 {

typedef enum { MAX_FLAGS = 0x40 } TCPMaxFlags_t;  

typedef enum {
  CLOSED,       // 0
  LISTEN,       // 1
  SYN_SENT,     // 2
  SYN_RCVD,     // 3
  ESTABLISHED,  // 4
  CLOSE_WAIT,   // 5
  LAST_ACK,     // 6
  FIN_WAIT_1,   // 7
  FIN_WAIT_2,   // 8
  CLOSING,      // 9
  TIME_WAIT,   // 10
RECEIVED,      //11
RECEIVED_ACK,  //12
DATA_RECEIVED,  //13
CHECK,         //14
PERSIST_STATE,  //15
BUFFER_READ,    //16
SCHEDULE_SEND,   //17
SEND,           //18
SCHEDULE_ACK,//19
CHECK_REC,//20
UPDATE_RETX,//21
IDLE_S,//22
IDLE_R,//23
IDLE,
LAST_STATE} States_t;

typedef enum {
  APP_LISTEN,   // 0
  APP_CONNECT,  // 1
  APP_SEND,     // 2     
  APP_CLOSE,    // 3
  TIMEOUT,      // 4
  ACK_RX,       // 5
  SYN_RX,       // 6
  SYN_ACK_RX,   // 7
  FIN_RX,       // 8
  FIN_ACK_RX,   // 9
  FIN_ACKED,    // 10
  RST_RX,       // 11
  BAD_FLAGS,    // 12
RWIND_0,        //13
FORCED_TRANS,//14
CHECK_NAGLE,//15
SEND_DATA,//16
NOTIFY_APP, //17
FOUND_DATA,//18
CHECK_RX_BUFFER,//19
UPDATE_RWIND,//20
ACK_CHECK,//21
SET_RTO,//22
FORCED_TRANS1,//23
FORCED_TRANS2, //24
DATA_RECV,//25
LAST_DATA_FIN,//26
DATA_SOCK_FORKED,//27
SEND_SYN_ACK,//28
INITIALISE_BUFFERS,
LAST_EVENT} Events_t;

typedef enum {
  NO_ACT,       // 0
  ACK_TX,       // 1
  ACK_TX_1,     // 2 - ACK response to syn
  RST_TX,       // 3
  SYN_TX,       // 4
  SYN_ACK_TX,   // 5
  SYN_ACK_TX1,
  FIN_TX,       // 6
  FIN_ACK_TX,   // 7
  NEW_ACK,      // 8
  RETX,         // 9
  TX_DATA,      // 10
  PEER_CLOSE,   // 11
  APP_CLOSED,   // 12
  CANCEL_TM,    // 13
  APP_NOTIFY_ACTION,   // 14 - Notify app that connection failed
  SERV_NOTIFY,  // 15 - Notify server tcp that connection completed
  SS_CWND_1,//16
SS_CWND_2,//17
  RWIND_0_ACTION,//18
  BUFFER_READ_ACTIONS,//19
  NAGLE_ACTION,//20
  SEND_DATA_ACTION,//21
RX_BUFFER_ACTIONS,//22
RWIND_ACTION,//23
NOTIFY_APP_ACTION,//24
APP_NOTIFY,//25
DATA_RECEIVED_ACTION,//26
ACK_CHECK_ACTION,//27
SET_RTO_ACTION,//28
FORK_DATA_SOCKET,
SET_DELAYED_ACK,
TX_DATA_ARQ,
LAST_ACTION } Actions_t;

class SA  // State/Action pair
{
public:
  SA () : state (LAST_STATE), action (LAST_ACTION) { }
  SA (States_t s, Actions_t a) : state (s), action (a) { }
public:
  States_t  state;
  Actions_t action;
};
typedef std::vector<SA>  StateActionVec_t;
typedef std::vector<StateActionVec_t> StateActions_t;  // One per current state
typedef std::vector<Events_t> EventVec_t;      // For flag events lookup

//type for managing buffered out of sequence data            --not required separately for now
//typedef std::map<SequenceNumber32, Ptr<Packet> > UnAckData_t;

class TcpStateMachine {
  public:
    TcpStateMachine ();
    SA Lookup (States_t, Events_t);
    Events_t FlagsEvent (uint8_t); // Lookup event from flags

  public:
    StateActions_t aT; // Action table
    EventVec_t     eV; // Flags event lookup  
};

}//namespace ns3
#endif //TCP_TYPEDEFS_H
